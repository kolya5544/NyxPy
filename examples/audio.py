import asyncio
import os
import wave

import audioop # pip install audioop-lts

from nyxpy import (
    NyxClient, nyx_event, NyxError
)

nyx = NyxClient()


async def wav_pcm_stream(
        path: str,
        *,
        target_sr: int = 48000,
        target_ch: int = 1,
        frame_ms: int = 10,
):
    """
    –î–∞–Ω–Ω—ã–π –º–µ—Ç–æ–¥ –Ω—É–∂–µ–Ω, —á—Ç–æ–±—ã —Ä–∞–∑–±–∏—Ç—å WAV —Ñ–∞–π–ª –Ω–∞ int16-LE PCM –∫–∞–¥—Ä—ã (—Ñ—Ä–µ–π–º—ã), –∫–æ—Ç–æ—Ä—ã–µ –∑–∞—Ç–µ–º –æ—Ç—Å—ã–ª–∞—é—Ç—Å—è –ø–æ–≤–µ—Ä—Ö WebSocket.
    –î–ª—è –∏–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –¥–∞–Ω–Ω—ã—Ö –º–æ–∂–µ—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞.
    """
    if not os.path.isfile(path):
        raise NyxError(f"WAV not found: {path}")

    bytes_per_frame = int(target_sr * (frame_ms / 1000.0)) * target_ch * 2  # 2 bytes/sample
    state = None
    buf = b""

    with wave.open(path, "rb") as wf:
        in_ch = wf.getnchannels()
        in_sr = wf.getframerate()
        in_sw = wf.getsampwidth()  # –∫–æ–ª-–≤–æ –±–∞–π—Ç –Ω–∞ –æ–¥–∏–Ω —Å—ç–º–ø–ª

        if in_ch not in (1, 2):
            raise NyxError(f"Unsupported channels in WAV: {in_ch}")

        # –≤—ã–±–æ—Ä —Ä–∞–∑–º–µ—Ä–∞ —á–∞–Ω–∫–∞ –≤ —Ä–∞–∑–º–µ—Ä–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –≤—Ö–æ–¥—è—â–∏—Ö —Ñ—Ä–µ–π–º–æ–≤
        in_frames_per_chunk = max(1024, int(in_sr * frame_ms / 1000) * 4)

        while True:
            raw = wf.readframes(in_frames_per_chunk)
            if not raw:
                break

            # —Å—Ç–∞–Ω–¥–∞—Ä—Ç–∏–∑–∞—Ü–∏—è –¥–ª–∏–Ω—ã –¥–æ 16 –±–∏—Ç
            if in_sw != 2:
                raw = audioop.lin2lin(raw, in_sw, 2)

            # –∏–∑ —Å—Ç–µ—Ä–µ–æ –≤ –º–æ–Ω–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if in_ch == 2 and target_ch == 1:
                raw = audioop.tomono(raw, 2, 0.5, 0.5)
            elif in_ch == 1 and target_ch == 2:
                raw = audioop.tostereo(raw, 2, 1.0, 1.0)
            elif in_ch == target_ch:
                pass
            else:
                raise NyxError(f"Unsupported channel mapping: {in_ch} ‚Üí {target_ch}")

            # –ø–µ—Ä–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
            if in_sr != target_sr:
                raw, state = audioop.ratecv(raw, 2, target_ch, in_sr, target_sr, state)

            buf += raw

            # –ø–æ–ª—É—á–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ —Ñ—Ä–µ–π–º—ã
            while len(buf) >= bytes_per_frame:
                out = buf[:bytes_per_frame]
                buf = buf[bytes_per_frame:]
                yield out
                await asyncio.sleep(0)

    # –¥–æ–±–∏–≤–∞–µ–º 0x00 –¥–æ –Ω—É–∂–Ω–æ–π –¥–ª–∏–Ω—ã (–ø–∞–¥–¥–∏–Ω–≥)
    if buf:
        if len(buf) < bytes_per_frame:
            buf += b"\x00" * (bytes_per_frame - len(buf))
        yield buf

@nyx_event(type=nyx_event.NEW_MESSAGE) # –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
async def on_message(ev):
    if ev.data["sender_id"] == nyx.current_user.id: # –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–∞—à–∏ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        return

    msg = ev.data["data"]["content"]
    server_id = int(ev.data["channel_name"].split(":")[1])

    if msg.startswith("!–º—É–∑—ã–∫–∞"):
        # –ø–æ–ª—É—á–∞–µ–º –∫–∞–Ω–∞–ª—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ —é–∑–µ—Ä–∞
        channels = await nyx.get_channels(server_id=server_id)

        # –Ω–∞—Ö–æ–¥–∏–º –∫–∞–Ω–∞–ª, –≥–¥–µ —Å–∏–¥–∏—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
        voice_channel = next(
            (
                ch for ch in channels
                if isinstance(ch.type, str) and ch.type.lower() == "voice"
                   and ch.participants
                   and any(p.user_id == ev.data["member"]["id"] for p in ch.participants)
            ),
            None,
        )

        if not voice_channel:
            await nyx.reply(ev, f"–ü—Ä–∏–≤–µ—Ç, {ev.data["member"]["username"]}! –ù–µ –≤–∏–∂—É —Ç–µ–±—è –Ω–∏ –≤ –æ–¥–Ω–æ–º –≥–æ–ª–æ—Å–æ–≤–æ–º –∫–∞–Ω–∞–ª–µ ü§î")
            return

        await nyx.reply(ev, f"–ü—Ä–∏–≤–µ—Ç, {ev.data["member"]["username"]}! –í–∏–∂—É —Ç–µ–±—è –≤ #{voice_channel.name} (ID: {voice_channel.id}).")
        session = await nyx.voice_join(
            channel_id=voice_channel.id,
            audio_muted=False,
            sound_muted=False,
            ptt_enabled=False,
            ptt_timeout=200,
        )

        # –≤–æ—Ç —Ç–∞–∫, –∫—Å—Ç–∞—Ç–∏, –º–æ–∂–Ω–æ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å –≤—Ö–æ–¥—è—â–µ–µ –∞—É–¥–∏–æ:
        @session.events(type=session.events.REMOTE_AUDIO)
        async def _on_audio(participant, frame_bytes, sr, ch):
            return

        # –∞ –≤–æ—Ç —Ç—É—Ç –º—ã –æ—Ç—Å—ã–ª–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞ audio_test.wav
        src = await session.start_audio_source()
        await asyncio.sleep(1)
        asyncio.create_task(src.publish_pcm(wav_pcm_stream("examples/audio_test.wav")))


async def main():
    email = "–≤–∞—à–∞ –ø–æ—á—Ç–∞"
    password = "–≤–∞—à –ø–∞—Ä–æ–ª—å"

    # –ê—É—Ç–µ–Ω—Ç–∏—Ñ–∏—Ü–∏—Ä—É–µ–º—Å—è –≤ Nyx
    await nyx.login(email, password)

    # –ü–æ–¥–ø–∏—Å—ã–≤–∞–µ–º—Å—è –Ω–∞ –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    await nyx.connect_ws()
    await nyx.ws_subscribe_all()

    # –û–∂–∏–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è...
    await asyncio.Event().wait()


if __name__ == "__main__":
    asyncio.run(main())
